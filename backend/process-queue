#!/bin/bash

usage () {
    echo "Usage: $0 [user@]remote worker-command" >&2
    exit 1
}

[ $# -eq 2 ] || usage

# Username and hostname or IP of remote server, where jobs arrive.
# Used by ssh and scp.
REMOTE=$1

# Program that processes jobs, one by one.
# Path to job is given as argument, errors are written to STDERR.
WORKER=$2

# Wait that many seconds before retry after error.
WAIT_ERR=10

# Append content of file 'err' together with time stamp to file 'log'.
log () {
    echo -n 'Date: ' >>log
    date >>log
    cat err >>log
}

# Log error, if it occurs for first time.
# If this type of error has already been logged then log nothing,
# but wait for $WAIT_ERR seconds.
log-wait () {
    local STATUS="status/$1"
    if [ -f $STATUS ] ; then
        sleep $WAIT_ERR
    else
        touch $STATUS
        log
    fi
}

# Reset error status to ok, so this type of error will be logged again.
status-ok () {
    local STATUS="status/$1"
    rm -f $STATUS
}

# Execute $cmd repeatedly until success.
# Errors are written to file 'err' and logged once.
retry () {
    local cmd=$1
    local STATUS=$2
    while true; do
        $cmd 2>err ||
            # On failure, log once, wait and try again.
            { log-wait $STATUS; continue; }
        status-ok $STATUS
        break
    done
}

# Wait for next job on remote server,
# move it from "waiting" to "inprogress",
# copy job to "inprogress" on local server,
# set global variable INPROGRESS to "inprogress/job-id".
get-job () {
    while true; do
        INPROGRESS=$(ssh -q $REMOTE <<'EOF' 2>err
# Execute on remote server.
# Abort on every error.
set -e
mkdir -p waiting inprogress finished result tmp

while true; do

    # Look for stale job in directory "inprogress".
    # Check "inprogress" inside loop, because a copy of this script
    # (started by ssh) may still be running, if outer script was restarted.
    JOB=$(ls -rt inprogress | head -n1)
    if [ -z "$JOB" ] ; then

        # Wait for jobs appearing in directory "waiting".
        # Take oldest job: first element of list
        JOB=$(ls -rt waiting | head -n1)
        if [ -n "$JOB" ] ; then
            # Found job, move from "waiting" to "inprogress".
            mv waiting/$JOB inprogress/$JOB
        fi
    fi
    if [ -n "$JOB" ] ; then
        # Announce found file on STDOUT.
        echo inprogress/$JOB
        exit
    fi
    # No job found, wait and check again
    sleep 1
done
EOF
                  ) ||
            # On failure, log once, wait and try again.
            { log-wait ssh-get; continue; }
        status-ok ssh-get
        break
    done
    local JOB=$(basename $INPROGRESS)
    local TMP=tmp/$JOB
    retry "scp -q $REMOTE:$INPROGRESS $TMP" scp-get
    mv $TMP $INPROGRESS
}

# Move result/job-id to remote server: result/job-id
# Remove inprogress/job-id locally and move to finished/ at remote server.
mark-finished () {
    local JOB=$1
    local RESULT=result/$JOB
    local TMP=tmp/$JOB
    local INPROGRESS=inprogress/$JOB
    local FINISHED=finished/$JOB
    retry "scp -q $RESULT $REMOTE:$TMP" scp-put
    retry "ssh -q $REMOTE mv $TMP $RESULT" ssh-mv-result

    # Ignore error if file was already moved before,
    # but still retry, if ssh fails.
    retry "ssh -q $REMOTE mv $INPROGRESS $FINISHED || true" ssh-mv-job
    rm $RESULT
    rm -f $INPROGRESS
}

mkdir -p inprogress result status tmp
while true; do

    # Read job names.
    # Only one name expected and only process first found job.
    RESULT=$(ls result | head -n1)
    if [ -z "$RESULT" ] ; then
        INPROGRESS=$(ls inprogress | head -n1)
        if [ -z "$INPROGRESS" ] ; then
            # Wait for next job, set global variable INPROGRESS.
            get-job
        fi
        JOB=$(basename $INPROGRESS)
        RESULT=result/$JOB
        TMP=tmp/$JOB
        # Store errors in $RESULT.
        # File is emtpy on success.
        $WORKER $INPROGRESS 2>$TMP ||
            grep -q '[^[:space:]]' $TMP ||
            echo "Unknown error" > $TMP
        mv $TMP $RESULT
    else
        JOB=$(basename $INPROGRESS)
    fi
    mark-finished $JOB
done
