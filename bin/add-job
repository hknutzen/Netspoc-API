#!/usr/bin/env perl

=head1 NAME

add-job - Add job from STDIN to queue, print ID of job to STDOUT

=head1 SYNOPSIS

add-job

=head1 COPYRIGHT AND DISCLAIMER

(c) 2019 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc-API

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

=cut

use strict;
use warnings;
use Fcntl qw(:seek :flock);
use File::Temp qw(tempfile);

chdir($ENV{HOME}) or die "Can't cd to '$ENV{HOME}': $!\n";

# Jobs are stored in directory waiting/ in files 1, 2, 3, ...
# File name for storing number of last stored job.
my $counter = 'job-counter';
my $queue = 'waiting';

# Initialize job number on first run
-f $counter or
    system("touch $counter") == 0 or
    die "Can't create $counter: $!\n";

# Find number for next job.
# Read previous job number.
open(my $fh, '+<', $counter) or die "Can't open $counter: $!\n";

# Lock it for exclusive access
flock($fh, LOCK_EX) or die "Can't get lock: $!\n";

# Read current value; is empty on first run
my $count = <$fh> || 0;

# Increment value and write back
$count++;
seek($fh, 0, SEEK_SET);
printf $fh $count;

close $fh;

# Read job description from STDIN, write to temp file, move to queue.
$/ = undef;
my $data = <>;

($fh, my $tmpname) = tempfile( DIR => './' );
print $fh $data;
close $fh;

my $job = "$queue/$count";
rename $tmpname, $job or die "Can't mv tempfile to $job: $!";

# Print ID of new job to STDOUT.
print $count;
